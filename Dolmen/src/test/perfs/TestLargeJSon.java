package test.perfs;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Scanner;

import codegen.BaseParser.ParsingException;
import test.examples.JSonLWLexer;
import test.examples.JSonLWParser;
//import test.examples.JSonLexer;
//import test.examples.JSonParser;

/**
 * This class tests the lexer/parser generated by Dolmen
 * from the {@code tests/jl/JSon.jl} and {@code tests/jg/JSon.jg}
 * files by running it on a very large input file.
 * 
 * @author StÃ©phane Lescuyer
 */
public final class TestLargeJSon {

	private TestLargeJSon() {
		// Static utility only
	}
	
	private static void testLarge(String filename) throws IOException {
		System.out.print("Press ENTER to start parse >");
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(System.in);
		scanner.nextLine();

		try (Reader file = new BufferedReader(new FileReader(filename))) {
			JSonLWLexer lexer = new JSonLWLexer(filename, file);
			JSonLWParser parser = new JSonLWParser(lexer::main);
			long start = System.nanoTime();
			parser.json();
//			@SuppressWarnings("unused")
//			JSonParser.Value<?> res = parser.json();
			long end = System.nanoTime();
			System.out.println("Parsed " + filename + " in " + ((end - start) / 1000000) + "ms");
		}
		catch (ParsingException e) {
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("javadoc")
	public static void main(String args[]) throws IOException {
		testLarge("tests/inputs/citylots.json");
	}
}
