package test.examples;
import test.examples.StraightLineParser.Token;
import static test.examples.StraightLineParser.Token.*;
/**
 * Lexer generated by Dolmen 
 */
@org.eclipse.jdt.annotation.NonNullByDefault({})
public final class StraightLineLexer extends codegen.LexBuffer {
    
     
    
    /**
     * Returns a fresh lexer based on the given character stream
     * @param inputname
     * @param reader
     */
    public StraightLineLexer(String inputname, java.io.Reader reader) {
        super(inputname, reader);
    }
    
    /**
     * Entry point for rule main
     */
    public Token main() {
        // Initialize lexer for this automaton
        startToken();
        int result = _jl_cell0();
        endToken();
        switch (result) {
        case 0:  {
             return main(); 
        }
        case 1:  {
             return INT(Integer.parseInt(getLexeme())); 
        }
        case 2:  {
             return PRINT; 
        }
        case 3:  {
             return ID(getLexeme()); 
        }
        case 4:  {
             return PLUS; 
        }
        case 5:  {
             return TIMES; 
        }
        case 6:  {
             return MINUS; 
        }
        case 7:  {
             return DIV; 
        }
        case 8:  {
             return COMMA; 
        }
        case 9:  {
             return LPAREN; 
        }
        case 10:  {
             return RPAREN; 
        }
        case 11:  {
             return ASSIGN; 
        }
        case 12:  {
             return SEMICOLON; 
        }
        case 13:  {
             return EOF; 
        }
        default:
            throw new LexicalError("Empty token");
        }
        
    }
    
    private int _jl_cell0() {
        switch (getNextChar()) {
        // 0x0029
        case 41: {
            return _jl_cell4();
        }
        // 0x003a
        case 58: {
            return _jl_cell3();
        }
        // 0x0028
        case 40: {
            return _jl_cell5();
        }
        // 0x002f
        case 47: {
            return _jl_cell7();
        }
        // 0xffff
        case 65535: {
            return _jl_cell1();
        }
        // [0-9]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell13();
        }
        // [A-Z\_a-oq-z]
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell11();
        }
        // 0x002c
        case 44: {
            return _jl_cell6();
        }
        // 0x002a
        case 42: {
            return _jl_cell9();
        }
        // \-
        case 45: {
            return _jl_cell8();
        }
        // p
        case 112: {
            return _jl_cell12();
        }
        // [0x0008-0x000a0x000d0x0020]
        case 8:
        case 9:
        case 10:
        case 13:
        case 32: {
            return _jl_cell14();
        }
        // 0x003b
        case 59: {
            return _jl_cell2();
        }
        // 0x002b
        case 43: {
            return _jl_cell10();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell1() {
        return 13;
    }
    
    private int _jl_cell2() {
        return 12;
    }
    
    private int _jl_cell3() {
        switch (getNextChar()) {
        // 0x003d
        case 61: {
            return _jl_cell19();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell4() {
        return 10;
    }
    
    private int _jl_cell5() {
        return 9;
    }
    
    private int _jl_cell6() {
        return 8;
    }
    
    private int _jl_cell7() {
        return 7;
    }
    
    private int _jl_cell8() {
        return 6;
    }
    
    private int _jl_cell9() {
        return 5;
    }
    
    private int _jl_cell10() {
        return 4;
    }
    
    private int _jl_cell11() {
        mark(3);
        switch (getNextChar()) {
        // [0-9A-Z\_a-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell11();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell12() {
        mark(3);
        switch (getNextChar()) {
        // [0-9A-Z\_a-qs-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell11();
        }
        // r
        case 114: {
            return _jl_cell15();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell13() {
        mark(1);
        switch (getNextChar()) {
        // [0-9]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell13();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell14() {
        mark(0);
        switch (getNextChar()) {
        // [0x0008-0x000a0x000d0x0020]
        case 8:
        case 9:
        case 10:
        case 13:
        case 32: {
            return _jl_cell14();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell15() {
        mark(3);
        switch (getNextChar()) {
        // [0-9A-Z\_a-hj-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell11();
        }
        // i
        case 105: {
            return _jl_cell16();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell16() {
        mark(3);
        switch (getNextChar()) {
        // [0-9A-Z\_a-mo-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell11();
        }
        // n
        case 110: {
            return _jl_cell17();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell17() {
        mark(3);
        switch (getNextChar()) {
        // [0-9A-Z\_a-su-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell11();
        }
        // t
        case 116: {
            return _jl_cell18();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell18() {
        mark(2);
        switch (getNextChar()) {
        // [0-9A-Z\_a-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell11();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell19() {
        return 11;
    }
    
     
    
}
