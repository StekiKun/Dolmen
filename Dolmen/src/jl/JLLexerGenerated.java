package jl;
import static jl.JLToken.*;
/**
 * Lexer generated by Dolmen 
 */
@org.eclipse.jdt.annotation.NonNullByDefault({})
public final class JLLexerGenerated extends codegen.LexBuffer {
    
    
    private final StringBuilder stringBuffer = new StringBuilder();
    private int braceDepth = 0;
    
    private char forBackslash(char c) {
        switch (c) {
        case 'n': return '\012';
        case 'r': return '\015';
        case 'b': return '\010';
        case 't': return '\011';
        case 'f': return '\014';
        default: return c;
        }
    }
    
    private char fromOctalCode(String code) {
        return (char)(Integer.parseInt(code, 8));    }
    
    private char fromHexCode(String code) {
        return (char)(Integer.parseInt(code, 16));    }
    
    private jl.JLToken identOrKeyword(String id) {
        if (id.equals("rule")) return RULE;
        else if (id.equals("shortest")) return SHORTEST;
        else if (id.equals("eof")) return EOF;
        else if (id.equals("as")) return AS;
        else if (id.equals("orelse")) return ORELSE;
        else if (id.equals("import")) return IMPORT;
        else if (id.equals("static")) return STATIC;
        else if (id.equals("public")) return PUBLIC;
        else if (id.equals("private")) return PRIVATE;
        else return IDENT(id);
    }

    
    /**
     * Returns a fresh lexer based on the given character stream
     * @param inputname
     * @param reader
     */
    public JLLexerGenerated(String inputname, java.io.Reader reader) {
        super(inputname, reader);
    }
    
    /**
     * Entry point for rule main
     */
    public jl.JLToken main() {
        // Initialize lexer for this automaton
        startToken();
        int result = _jl_cell0();
        endToken();
        switch (result) {
        case 0:  {
            return main();
        }
        case 1:  {
            newline(); return main();
        }
        case 2:  {
            comment(); return main();
        }
        case 3:  {
            return main();
        }
        case 4:  {
            Position stringStart = getLexemeStart();
stringBuffer.setLength(0);
string();
startLoc = stringStart;
jl.JLToken res = LSTRING(stringBuffer.toString());
return res;
        }
        case 5:  {
            braceDepth = 1;
Position p = getLexemeEnd();
int endOffset = action();
syntax.Extent ext = new syntax.Extent(
    filename, p.offset, endOffset, p.line, p.column());
return ACTION(ext);
        }
        case 6:  {
            return UNDERSCORE;
        }
        case 7:  {
            return identOrKeyword(getLexeme());
        }
        case 8:  {
            return INTEGER(Integer.parseInt(getLexeme()));
        }
        case 9:  {
            final char c = getSubLexemeChar(startPos + 1);
            return LCHAR(c);
        }
        case 10:  {
            final char c = getSubLexemeChar(startPos + 2);
            return LCHAR(forBackslash(c));
        }
        case 11:  {
            final String code = getSubLexeme(startPos + 2, curPos + (-1));
            return LCHAR(fromOctalCode(code));
        }
        case 12:  {
            final String code = getSubLexeme(curPos + (-5), curPos + (-1));
            return LCHAR(fromHexCode(code));
        }
        case 13:  {
            throw error("Invalid Unicode escacpe sequence");
        }
        case 14:  {
            return EQUAL;
        }
        case 15:  {
            return OR;
        }
        case 16:  {
            return LBRACKET;
        }
        case 17:  {
            return RBRACKET;
        }
        case 18:  {
            return STAR;
        }
        case 19:  {
            return MAYBE;
        }
        case 20:  {
            return PLUS;
        }
        case 21:  {
            return LPAREN;
        }
        case 22:  {
            return RPAREN;
        }
        case 23:  {
            return CARET;
        }
        case 24:  {
            return DASH;
        }
        case 25:  {
            return HASH;
        }
        case 26:  {
            return DOT;
        }
        case 27:  {
            return LANGLE;
        }
        case 28:  {
            return RANGLE;
        }
        case 29:  {
            return COMMA;
        }
        case 30:  {
            return SEMICOL;
        }
        case 31:  {
            return END;
        }
        case 32:  {
            throw error("Unfinished token");
        }
        default:
            throw error("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule comment
     */
    private void comment() {
        // Initialize lexer for this automaton
        startToken();
        int result = _jl_cell49();
        endToken();
        switch (result) {
        case 0:  {
            return;
        }
        case 1:  {
            comment(); return;
        }
        case 2:  {
            stringBuffer.setLength(0);
string();
stringBuffer.setLength(0);comment(); return;

        }
        case 3:  {
            skipChar(); comment(); return;
        }
        case 4:  {
            throw error("Unterminated comment");
        }
        case 5:  {
            newline(); comment(); return;
        }
        case 6:  {
            comment(); return;
        }
        default:
            throw error("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule string
     */
    private void string() {
        // Initialize lexer for this automaton
        startToken();
        int result = _jl_cell58();
        endToken();
        switch (result) {
        case 0:  {
            return;
        }
        case 1:  {
            final char c = getSubLexemeChar(startPos + 1);
            stringBuffer.append(forBackslash(c)); string(); return;
        }
        case 2:  {
            final String code = getSubLexeme(startPos + 1, curPos);
            stringBuffer.append(fromOctalCode(code)); string(); return;
        }
        case 3:  {
            final String code = getSubLexeme(curPos + (-4), curPos);
            stringBuffer.append(fromHexCode(code)); string(); return;
        }
        case 4:  {
            throw error("Invalid Unicode escacpe sequence");
        }
        case 5:  {
            final char c = getSubLexemeChar(startPos + 1);
            stringBuffer.append('\\').append(c); string(); return;
        }
        case 6:  {
            throw error("Unterminated string");
        }
        case 7:  {
            stringBuffer.append(getLexeme()); string(); return;
        }
        default:
            throw error("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule action
     */
    private int action() {
        // Initialize lexer for this automaton
        startToken();
        int result = _jl_cell74();
        endToken();
        switch (result) {
        case 0:  {
            ++braceDepth; return action();
        }
        case 1:  {
            --braceDepth;
if (braceDepth == 0) return getLexemeStart().offset - 1;
return action();
        }
        case 2:  {
            stringBuffer.setLength(0);
string();stringBuffer.setLength(0);
return action();
        }
        case 3:  {
            skipChar(); return action();
        }
        case 4:  {
            comment(); return action();
        }
        case 5:  {
            return action();
        }
        case 6:  {
            throw error("Unterminated action");
        }
        case 7:  {
            newline(); return action();
        }
        case 8:  {
            return action();
        }
        default:
            throw error("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule skipChar
     */
    private void skipChar() {
        // Initialize lexer for this automaton
        startToken();
        int result = _jl_cell86();
        endToken();
        switch (result) {
        case 0:  {
            return;
        }
        case 1:  {
            return;
        }
        case 2:  {
            return;
        }
        case 3:  {
            return;
        }
        default:
            throw error("Empty token");
        }
        
    }
    
    private int _jl_cell0() {
        switch (getNextChar()) {
        // [0x00090x000c0x0020]
        case 9:
        case 12:
        case 32: {
            return _jl_cell30();
        }
        // 0x000a
        case 10: {
            return _jl_cell27();
        }
        // 0x000d
        case 13: {
            return _jl_cell28();
        }
        // 0x0022
        case 34: {
            return _jl_cell25();
        }
        // 0x0023
        case 35: {
            return _jl_cell7();
        }
        // 0x0027
        case 39: {
            return _jl_cell19();
        }
        // 0x0028
        case 40: {
            return _jl_cell11();
        }
        // 0x0029
        case 41: {
            return _jl_cell10();
        }
        // 0x002a
        case 42: {
            return _jl_cell14();
        }
        // 0x002b
        case 43: {
            return _jl_cell12();
        }
        // 0x002c
        case 44: {
            return _jl_cell3();
        }
        // \-
        case 45: {
            return _jl_cell8();
        }
        // 0x002e
        case 46: {
            return _jl_cell6();
        }
        // 0x002f
        case 47: {
            return _jl_cell26();
        }
        // 0
        case 48: {
            return _jl_cell21();
        }
        // [1-9]
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell20();
        }
        // 0x003b
        case 59: {
            return _jl_cell2();
        }
        // 0x003c
        case 60: {
            return _jl_cell5();
        }
        // 0x003d
        case 61: {
            return _jl_cell18();
        }
        // 0x003e
        case 62: {
            return _jl_cell4();
        }
        // 0x003f
        case 63: {
            return _jl_cell13();
        }
        // [A-Za-z]
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell22();
        }
        // \[
        case 91: {
            return _jl_cell16();
        }
        // \]
        case 93: {
            return _jl_cell15();
        }
        // \^
        case 94: {
            return _jl_cell9();
        }
        // \_
        case 95: {
            return _jl_cell23();
        }
        // 0x007b
        case 123: {
            return _jl_cell24();
        }
        // 0x007c
        case 124: {
            return _jl_cell17();
        }
        // 0xffff
        case 65535: {
            return _jl_cell29();
        }
        default:  {
            return _jl_cell1();
        }
        }
        
    }
    
    private int _jl_cell1() {
        return 32;
    }
    
    private int _jl_cell2() {
        return 30;
    }
    
    private int _jl_cell3() {
        return 29;
    }
    
    private int _jl_cell4() {
        return 28;
    }
    
    private int _jl_cell5() {
        return 27;
    }
    
    private int _jl_cell6() {
        return 26;
    }
    
    private int _jl_cell7() {
        return 25;
    }
    
    private int _jl_cell8() {
        return 24;
    }
    
    private int _jl_cell9() {
        return 23;
    }
    
    private int _jl_cell10() {
        return 22;
    }
    
    private int _jl_cell11() {
        return 21;
    }
    
    private int _jl_cell12() {
        return 20;
    }
    
    private int _jl_cell13() {
        return 19;
    }
    
    private int _jl_cell14() {
        return 18;
    }
    
    private int _jl_cell15() {
        return 17;
    }
    
    private int _jl_cell16() {
        return 16;
    }
    
    private int _jl_cell17() {
        return 15;
    }
    
    private int _jl_cell18() {
        return 14;
    }
    
    private int _jl_cell19() {
        mark(32);
        switch (getNextChar()) {
        // \\
        case 92: {
            return _jl_cell33();
        }
        // 0xffff
        case 65535: {
            return rewind();
            
        }
        default:  {
            return _jl_cell34();
        }
        }
        
    }
    
    private int _jl_cell20() {
        while (true) {
            mark(8);
            switch (getNextChar()) {
            // [0-9]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57: {
                continue;
            }
            default:  {
                return rewind();
                
            }
            }
            
        }
    }
    
    private int _jl_cell21() {
        return 8;
    }
    
    private int _jl_cell22() {
        while (true) {
            mark(7);
            switch (getNextChar()) {
            // [0-9A-Z\_a-z]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 95:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122: {
                continue;
            }
            default:  {
                return rewind();
                
            }
            }
            
        }
    }
    
    private int _jl_cell23() {
        mark(6);
        switch (getNextChar()) {
        // [0-9A-Z\_a-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell22();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell24() {
        return 5;
    }
    
    private int _jl_cell25() {
        return 4;
    }
    
    private int _jl_cell26() {
        mark(32);
        switch (getNextChar()) {
        // 0x002a
        case 42: {
            return _jl_cell32();
        }
        // 0x002f
        case 47: {
            return _jl_cell31();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell27() {
        return 1;
    }
    
    private int _jl_cell28() {
        mark(1);
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return _jl_cell27();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell29() {
        return 31;
    }
    
    private int _jl_cell30() {
        while (true) {
            mark(0);
            switch (getNextChar()) {
            // [0x00090x000c0x0020]
            case 9:
            case 12:
            case 32: {
                continue;
            }
            default:  {
                return rewind();
                
            }
            }
            
        }
    }
    
    private int _jl_cell31() {
        while (true) {
            mark(3);
            switch (getNextChar()) {
            // [0x000a0x000d0xffff]
            case 10:
            case 13:
            case 65535: {
                return rewind();
                
            }
            default:  {
                continue;
            }
            }
            
        }
    }
    
    private int _jl_cell32() {
        return 2;
    }
    
    private int _jl_cell33() {
        switch (getNextChar()) {
        // [0x00200x00220x0027\\bfnrt]
        case 32:
        case 34:
        case 39:
        case 92:
        case 98:
        case 102:
        case 110:
        case 114:
        case 116: {
            return _jl_cell38();
        }
        // [0-3]
        case 48:
        case 49:
        case 50:
        case 51: {
            return _jl_cell37();
        }
        // [4-7]
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell36();
        }
        // u
        case 117: {
            return _jl_cell39();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell34() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell35();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell35() {
        return 9;
    }
    
    private int _jl_cell36() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell47();
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell48();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell37() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell47();
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell46();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell38() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell45();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell39() {
        while (true) {
            mark(13);
            switch (getNextChar()) {
            // [0-9A-Fa-f]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102: {
                return _jl_cell40();
            }
            // u
            case 117: {
                continue;
            }
            default:  {
                return rewind();
                
            }
            }
            
        }
    }
    
    private int _jl_cell40() {
        switch (getNextChar()) {
        // [0-9A-Fa-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell41();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell41() {
        switch (getNextChar()) {
        // [0-9A-Fa-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell42();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell42() {
        switch (getNextChar()) {
        // [0-9A-Fa-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell43();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell43() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell44();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell44() {
        return 12;
    }
    
    private int _jl_cell45() {
        return 10;
    }
    
    private int _jl_cell46() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell47();
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell48();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell47() {
        return 11;
    }
    
    private int _jl_cell48() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell47();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell49() {
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return _jl_cell51();
        }
        // 0x000d
        case 13: {
            return _jl_cell52();
        }
        // 0x0022
        case 34: {
            return _jl_cell55();
        }
        // 0x0027
        case 39: {
            return _jl_cell54();
        }
        // 0x002a
        case 42: {
            return _jl_cell56();
        }
        // 0xffff
        case 65535: {
            return _jl_cell53();
        }
        default:  {
            return _jl_cell50();
        }
        }
        
    }
    
    private int _jl_cell50() {
        while (true) {
            mark(6);
            switch (getNextChar()) {
            // [0x000a0x000d0x00220x00270x002a0xffff]
            case 10:
            case 13:
            case 34:
            case 39:
            case 42:
            case 65535: {
                return rewind();
                
            }
            default:  {
                continue;
            }
            }
            
        }
    }
    
    private int _jl_cell51() {
        return 5;
    }
    
    private int _jl_cell52() {
        mark(5);
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return _jl_cell51();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell53() {
        return 4;
    }
    
    private int _jl_cell54() {
        return 3;
    }
    
    private int _jl_cell55() {
        return 2;
    }
    
    private int _jl_cell56() {
        mark(1);
        switch (getNextChar()) {
        // 0x002f
        case 47: {
            return _jl_cell57();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell57() {
        return 0;
    }
    
    private int _jl_cell58() {
        switch (getNextChar()) {
        // 0x0022
        case 34: {
            return _jl_cell59();
        }
        // \\
        case 92: {
            return _jl_cell62();
        }
        // 0xffff
        case 65535: {
            return _jl_cell61();
        }
        default:  {
            return _jl_cell60();
        }
        }
        
    }
    
    private int _jl_cell59() {
        return 0;
    }
    
    private int _jl_cell60() {
        while (true) {
            mark(7);
            switch (getNextChar()) {
            // [0x0022\\0xffff]
            case 34:
            case 92:
            case 65535: {
                return rewind();
                
            }
            default:  {
                continue;
            }
            }
            
        }
    }
    
    private int _jl_cell61() {
        return 6;
    }
    
    private int _jl_cell62() {
        switch (getNextChar()) {
        // [0x00200x00220x0027\\bfnrt]
        case 32:
        case 34:
        case 39:
        case 92:
        case 98:
        case 102:
        case 110:
        case 114:
        case 116: {
            return _jl_cell64();
        }
        // [0-3]
        case 48:
        case 49:
        case 50:
        case 51: {
            return _jl_cell67();
        }
        // [4-7]
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell66();
        }
        // u
        case 117: {
            return _jl_cell65();
        }
        // 0xffff
        case 65535: {
            return rewind();
            
        }
        default:  {
            return _jl_cell63();
        }
        }
        
    }
    
    private int _jl_cell63() {
        return 5;
    }
    
    private int _jl_cell64() {
        return 1;
    }
    
    private int _jl_cell65() {
        while (true) {
            mark(4);
            switch (getNextChar()) {
            // [0-9A-Fa-f]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102: {
                return _jl_cell70();
            }
            // u
            case 117: {
                continue;
            }
            default:  {
                return rewind();
                
            }
            }
            
        }
    }
    
    private int _jl_cell66() {
        mark(2);
        switch (getNextChar()) {
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell69();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell67() {
        mark(2);
        switch (getNextChar()) {
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell68();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell68() {
        mark(2);
        switch (getNextChar()) {
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell69();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell69() {
        return 2;
    }
    
    private int _jl_cell70() {
        switch (getNextChar()) {
        // [0-9A-Fa-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell71();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell71() {
        switch (getNextChar()) {
        // [0-9A-Fa-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell72();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell72() {
        switch (getNextChar()) {
        // [0-9A-Fa-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell73();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell73() {
        return 3;
    }
    
    private int _jl_cell74() {
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return _jl_cell82();
        }
        // 0x000d
        case 13: {
            return _jl_cell83();
        }
        // 0x0022
        case 34: {
            return _jl_cell78();
        }
        // 0x0027
        case 39: {
            return _jl_cell77();
        }
        // 0x002f
        case 47: {
            return _jl_cell76();
        }
        // 0x007b
        case 123: {
            return _jl_cell80();
        }
        // 0x007d
        case 125: {
            return _jl_cell79();
        }
        // 0xffff
        case 65535: {
            return _jl_cell75();
        }
        default:  {
            return _jl_cell81();
        }
        }
        
    }
    
    private int _jl_cell75() {
        return 6;
    }
    
    private int _jl_cell76() {
        switch (getNextChar()) {
        // 0x002a
        case 42: {
            return _jl_cell85();
        }
        // 0x002f
        case 47: {
            return _jl_cell84();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell77() {
        return 3;
    }
    
    private int _jl_cell78() {
        return 2;
    }
    
    private int _jl_cell79() {
        return 1;
    }
    
    private int _jl_cell80() {
        return 0;
    }
    
    private int _jl_cell81() {
        while (true) {
            mark(8);
            switch (getNextChar()) {
            // [0x000a0x000d0x00220x00270x002f0x007b0x007d0xffff]
            case 10:
            case 13:
            case 34:
            case 39:
            case 47:
            case 123:
            case 125:
            case 65535: {
                return rewind();
                
            }
            default:  {
                continue;
            }
            }
            
        }
    }
    
    private int _jl_cell82() {
        return 7;
    }
    
    private int _jl_cell83() {
        mark(7);
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return _jl_cell82();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell84() {
        while (true) {
            mark(5);
            switch (getNextChar()) {
            // [0x000a0x000d0xffff]
            case 10:
            case 13:
            case 65535: {
                return rewind();
                
            }
            default:  {
                continue;
            }
            }
            
        }
    }
    
    private int _jl_cell85() {
        return 4;
    }
    
    private int _jl_cell86() {
        mark(3);
        switch (getNextChar()) {
        // [0x00270xffff]
        case 39:
        case 65535: {
            return rewind();
            
        }
        // \\
        case 92: {
            return _jl_cell87();
        }
        default:  {
            return _jl_cell88();
        }
        }
        
    }
    
    private int _jl_cell87() {
        switch (getNextChar()) {
        // [0-3]
        case 48:
        case 49:
        case 50:
        case 51: {
            return _jl_cell92();
        }
        // [4-7]
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell91();
        }
        // 0xffff
        case 65535: {
            return rewind();
            
        }
        default:  {
            return _jl_cell90();
        }
        }
        
    }
    
    private int _jl_cell88() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell89();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell89() {
        return 0;
    }
    
    private int _jl_cell90() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell96();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell91() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell94();
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell95();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell92() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell94();
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell93();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell93() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell94();
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell95();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell94() {
        return 1;
    }
    
    private int _jl_cell95() {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return _jl_cell94();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int _jl_cell96() {
        return 2;
    }
    
}
