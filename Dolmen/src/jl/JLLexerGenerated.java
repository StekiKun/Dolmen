package jl;
import static jl.JLToken.*;
/**
 * Lexer generated by Dolmen 
 */
@org.eclipse.jdt.annotation.NonNullByDefault({})
public final class JLLexerGenerated extends codegen.LexBuffer {
    
    /**
     * Exception raised by generated lexer
     */
    public static final class LexicalError extends RuntimeException {
        private static final long serialVersionUID = 1L;
        
        /**
         * @param msg	error message
         */
        public LexicalError(String msg) {
            super(msg);
        }
        
    }
    
    
    private final StringBuilder stringBuffer = new StringBuilder();
    private int braceDepth = 0;
    
    private int loc = 1;
    private int bol = 0;
    
    private void newline() {
        ++loc; bol = absPos + curPos;
    }
    
    private char forBackslash(char c) {
        switch (c) {
        case 'n': return '\012';
        case 'r': return '\015';
        case 'b': return '\010';
        case 't': return '\011';
        default: return c;
        }
    }
    
    private jl.JLToken identOrKeyword(String id) {
        if (id.equals("rule")) return RULE;
        else if (id.equals("shortest")) return SHORTEST;
        else if (id.equals("eof")) return EOF;
        else if (id.equals("as")) return AS;
        else if (id.equals("import")) return IMPORT;
        else if (id.equals("static")) return STATIC;
        else if (id.equals("public")) return PUBLIC;
        else if (id.equals("private")) return PRIVATE;
        else return IDENT(id);
    }
    
    private LexicalError error(String msg) {
        String res = String.format("%s (line %d, col %d)",
            msg, loc, absPos + curPos - bol);
        return new LexicalError(res);
    }

    
    /**
     * Returns a fresh lexer based on the given character stream
     * @param inputname
     * @param reader
     */
    public JLLexerGenerated(String inputname, java.io.Reader reader) {
        super(inputname, reader);
    }
    
    /**
     * Entry point for rule main
     */
    public jl.JLToken main() throws java.io.IOException {
        // Initialize lexer for this automaton
        memory = new int[0];
        java.util.Arrays.fill(memory, -1);
        start();
        int result = cell0();
        switch (result) {
        case 0:  {
            return main();
        }
        case 1:  {
            newline(); return main();
        }
        case 2:  {
            comment(); return main();
        }
        case 3:  {
            return main();
        }
        case 4:  {
            stringBuffer.setLength(0);
string();
@SuppressWarnings("null")
jl.JLToken res = LSTRING(stringBuffer.toString());
return res;
        }
        case 5:  {
            braceDepth = 1;
int startLine = loc; int startOffset = absPos + curPos;
int startCol = startOffset - bol;
int endOffset = action();
syntax.Location loc = new syntax.Location(
    filename, startOffset, endOffset, startLine, startCol);
return ACTION(loc);
        }
        case 6:  {
            return UNDERSCORE;
        }
        case 7:  {
            return identOrKeyword(getLexeme());
        }
        case 8:  {
            final char c = getSubLexemeChar(startPos + 1);
            return LCHAR(c);
        }
        case 9:  {
            final char c = getSubLexemeChar(startPos + 2);
            return LCHAR(forBackslash(c));
        }
        case 10:  {
            return EQUAL;
        }
        case 11:  {
            return OR;
        }
        case 12:  {
            return LBRACKET;
        }
        case 13:  {
            return RBRACKET;
        }
        case 14:  {
            return STAR;
        }
        case 15:  {
            return MAYBE;
        }
        case 16:  {
            return PLUS;
        }
        case 17:  {
            return LPAREN;
        }
        case 18:  {
            return RPAREN;
        }
        case 19:  {
            return CARET;
        }
        case 20:  {
            return DASH;
        }
        case 21:  {
            return HASH;
        }
        case 22:  {
            return DOT;
        }
        case 23:  {
            return SEMICOL;
        }
        case 24:  {
            return END;
        }
        case 25:  {
            throw error("Unfinished token");
        }
        default:
            throw new LexicalError("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule comment
     */
    private void comment() throws java.io.IOException {
        // Initialize lexer for this automaton
        memory = new int[0];
        java.util.Arrays.fill(memory, -1);
        start();
        int result = cell34();
        switch (result) {
        case 0:  {
            return;
        }
        case 1:  {
            comment(); return;
        }
        case 2:  {
            stringBuffer.setLength(0);
string();
stringBuffer.setLength(0);comment(); return;

        }
        case 3:  {
            skipChar(); comment(); return;
        }
        case 4:  {
            throw error("Unterminated comment");
        }
        case 5:  {
            newline(); comment(); return;
        }
        case 6:  {
            comment(); return;
        }
        default:
            throw new LexicalError("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule string
     */
    private void string() throws java.io.IOException {
        // Initialize lexer for this automaton
        memory = new int[0];
        java.util.Arrays.fill(memory, -1);
        start();
        int result = cell43();
        switch (result) {
        case 0:  {
            return;
        }
        case 1:  {
            final char c = getSubLexemeChar(startPos + 1);
            stringBuffer.append(forBackslash(c)); string(); return;
        }
        case 2:  {
            final char c = getSubLexemeChar(startPos + 1);
            stringBuffer.append('\\').append(c); string(); return;
        }
        case 3:  {
            throw error("Unterminated string");
        }
        case 4:  {
            stringBuffer.append(getLexeme()); string(); return;
        }
        default:
            throw new LexicalError("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule action
     */
    private int action() throws java.io.IOException {
        // Initialize lexer for this automaton
        memory = new int[0];
        java.util.Arrays.fill(memory, -1);
        start();
        int result = cell50();
        switch (result) {
        case 0:  {
            ++braceDepth; return action();
        }
        case 1:  {
            --braceDepth;
if (braceDepth == 0) return absPos + startPos - 1;
return action();
        }
        case 2:  {
            stringBuffer.setLength(0);
string();stringBuffer.setLength(0);
return action();
        }
        case 3:  {
            skipChar(); return action();
        }
        case 4:  {
            comment(); return action();
        }
        case 5:  {
            return action();
        }
        case 6:  {
            throw error("Unterminated action");
        }
        case 7:  {
            newline(); return action();
        }
        case 8:  {
            return action();
        }
        default:
            throw new LexicalError("Empty token");
        }
        
    }
    
    /**
     * Entry point for rule skipChar
     */
    private void skipChar() throws java.io.IOException {
        // Initialize lexer for this automaton
        memory = new int[0];
        java.util.Arrays.fill(memory, -1);
        start();
        int result = cell62();
        switch (result) {
        case 0:  {
            return;
        }
        case 1:  {
            return;
        }
        case 2:  {
            return;
        }
        default:
            throw new LexicalError("Empty token");
        }
        
    }
    
    private int cell0() throws java.io.IOException {
        switch (getNextChar()) {
        // 0x0028
        case 40: {
            return cell9();
        }
        // 0x002a
        case 42: {
            return cell12();
        }
        // \]
        case 93: {
            return cell13();
        }
        // 0x003d
        case 61: {
            return cell16();
        }
        // \^
        case 94: {
            return cell7();
        }
        // 0x000a
        case 10: {
            return cell23();
        }
        // 0x0029
        case 41: {
            return cell8();
        }
        // \[
        case 91: {
            return cell14();
        }
        // 0xffff
        case 65535: {
            return cell2();
        }
        // 0x007b
        case 123: {
            return cell20();
        }
        // 0x003b
        case 59: {
            return cell3();
        }
        // 0x007c
        case 124: {
            return cell15();
        }
        // 0x003f
        case 63: {
            return cell11();
        }
        // \-
        case 45: {
            return cell6();
        }
        // 0x002e
        case 46: {
            return cell4();
        }
        // [0x00090x000c0x0020]
        case 9:
        case 12:
        case 32: {
            return cell25();
        }
        // 0x000d
        case 13: {
            return cell24();
        }
        // 0x002f
        case 47: {
            return cell22();
        }
        // 0x0023
        case 35: {
            return cell5();
        }
        // [A-Za-z]
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return cell18();
        }
        // \_
        case 95: {
            return cell19();
        }
        // 0x0027
        case 39: {
            return cell17();
        }
        // 0x0022
        case 34: {
            return cell21();
        }
        // 0x002b
        case 43: {
            return cell10();
        }
        default:  {
            return cell1();
        }
        }
        
    }
    
    private int cell1() throws java.io.IOException {
        return 25;
    }
    
    private int cell2() throws java.io.IOException {
        return 24;
    }
    
    private int cell3() throws java.io.IOException {
        return 23;
    }
    
    private int cell4() throws java.io.IOException {
        return 22;
    }
    
    private int cell5() throws java.io.IOException {
        return 21;
    }
    
    private int cell6() throws java.io.IOException {
        return 20;
    }
    
    private int cell7() throws java.io.IOException {
        return 19;
    }
    
    private int cell8() throws java.io.IOException {
        return 18;
    }
    
    private int cell9() throws java.io.IOException {
        return 17;
    }
    
    private int cell10() throws java.io.IOException {
        return 16;
    }
    
    private int cell11() throws java.io.IOException {
        return 15;
    }
    
    private int cell12() throws java.io.IOException {
        return 14;
    }
    
    private int cell13() throws java.io.IOException {
        return 13;
    }
    
    private int cell14() throws java.io.IOException {
        return 12;
    }
    
    private int cell15() throws java.io.IOException {
        return 11;
    }
    
    private int cell16() throws java.io.IOException {
        return 10;
    }
    
    private int cell17() throws java.io.IOException {
        mark(25);
        switch (getNextChar()) {
        // \\
        case 92: {
            return cell29();
        }
        // 0xffff
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell30();
        }
        }
        
    }
    
    private int cell18() throws java.io.IOException {
        mark(7);
        switch (getNextChar()) {
        // [0-9A-Z\_a-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return cell18();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell19() throws java.io.IOException {
        mark(6);
        switch (getNextChar()) {
        // [0-9A-Z\_a-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return cell18();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell20() throws java.io.IOException {
        return 5;
    }
    
    private int cell21() throws java.io.IOException {
        return 4;
    }
    
    private int cell22() throws java.io.IOException {
        mark(25);
        switch (getNextChar()) {
        // 0x002f
        case 47: {
            return cell26();
        }
        // 0x002a
        case 42: {
            return cell27();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell23() throws java.io.IOException {
        return 1;
    }
    
    private int cell24() throws java.io.IOException {
        mark(1);
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return cell23();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell25() throws java.io.IOException {
        mark(0);
        switch (getNextChar()) {
        // [0x00090x000c0x0020]
        case 9:
        case 12:
        case 32: {
            return cell25();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell26() throws java.io.IOException {
        switch (getNextChar()) {
        // [0x000a0x000d0xffff]
        case 10:
        case 13:
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell28();
        }
        }
        
    }
    
    private int cell27() throws java.io.IOException {
        return 2;
    }
    
    private int cell28() throws java.io.IOException {
        mark(3);
        switch (getNextChar()) {
        // [0x000a0x000d0xffff]
        case 10:
        case 13:
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell28();
        }
        }
        
    }
    
    private int cell29() throws java.io.IOException {
        switch (getNextChar()) {
        // [0x00200x00220x0027\\bnrt]
        case 32:
        case 34:
        case 39:
        case 92:
        case 98:
        case 110:
        case 114:
        case 116: {
            return cell32();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell30() throws java.io.IOException {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return cell31();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell31() throws java.io.IOException {
        return 8;
    }
    
    private int cell32() throws java.io.IOException {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return cell33();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell33() throws java.io.IOException {
        return 9;
    }
    
    private int cell34() throws java.io.IOException {
        switch (getNextChar()) {
        // 0x0022
        case 34: {
            return cell39();
        }
        // 0xffff
        case 65535: {
            return cell37();
        }
        // 0x000a
        case 10: {
            return cell35();
        }
        // 0x002a
        case 42: {
            return cell40();
        }
        // 0x000d
        case 13: {
            return cell36();
        }
        // 0x0027
        case 39: {
            return cell38();
        }
        default:  {
            return cell41();
        }
        }
        
    }
    
    private int cell35() throws java.io.IOException {
        return 5;
    }
    
    private int cell36() throws java.io.IOException {
        mark(5);
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return cell35();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell37() throws java.io.IOException {
        return 4;
    }
    
    private int cell38() throws java.io.IOException {
        return 3;
    }
    
    private int cell39() throws java.io.IOException {
        return 2;
    }
    
    private int cell40() throws java.io.IOException {
        mark(1);
        switch (getNextChar()) {
        // 0x002f
        case 47: {
            return cell42();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell41() throws java.io.IOException {
        mark(6);
        switch (getNextChar()) {
        // [0x000a0x000d0x00220x00270x002a0xffff]
        case 10:
        case 13:
        case 34:
        case 39:
        case 42:
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell41();
        }
        }
        
    }
    
    private int cell42() throws java.io.IOException {
        return 0;
    }
    
    private int cell43() throws java.io.IOException {
        switch (getNextChar()) {
        // 0xffff
        case 65535: {
            return cell45();
        }
        // \\
        case 92: {
            return cell46();
        }
        // 0x0022
        case 34: {
            return cell47();
        }
        default:  {
            return cell44();
        }
        }
        
    }
    
    private int cell44() throws java.io.IOException {
        mark(4);
        switch (getNextChar()) {
        // [0x0022\\0xffff]
        case 34:
        case 92:
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell44();
        }
        }
        
    }
    
    private int cell45() throws java.io.IOException {
        return 3;
    }
    
    private int cell46() throws java.io.IOException {
        switch (getNextChar()) {
        // 0xffff
        case 65535: {
            return rewind();
            
        }
        // [0x00200x00220x0027\\bnrt]
        case 32:
        case 34:
        case 39:
        case 92:
        case 98:
        case 110:
        case 114:
        case 116: {
            return cell49();
        }
        default:  {
            return cell48();
        }
        }
        
    }
    
    private int cell47() throws java.io.IOException {
        return 0;
    }
    
    private int cell48() throws java.io.IOException {
        return 2;
    }
    
    private int cell49() throws java.io.IOException {
        return 1;
    }
    
    private int cell50() throws java.io.IOException {
        switch (getNextChar()) {
        // 0xffff
        case 65535: {
            return cell58();
        }
        // 0x002f
        case 47: {
            return cell59();
        }
        // 0x007d
        case 125: {
            return cell53();
        }
        // 0x007b
        case 123: {
            return cell54();
        }
        // 0x0027
        case 39: {
            return cell51();
        }
        // 0x000a
        case 10: {
            return cell56();
        }
        // 0x0022
        case 34: {
            return cell52();
        }
        // 0x000d
        case 13: {
            return cell57();
        }
        default:  {
            return cell55();
        }
        }
        
    }
    
    private int cell51() throws java.io.IOException {
        return 3;
    }
    
    private int cell52() throws java.io.IOException {
        return 2;
    }
    
    private int cell53() throws java.io.IOException {
        return 1;
    }
    
    private int cell54() throws java.io.IOException {
        return 0;
    }
    
    private int cell55() throws java.io.IOException {
        mark(8);
        switch (getNextChar()) {
        // [0x000a0x000d0x00220x00270x002f0x007b0x007d0xffff]
        case 10:
        case 13:
        case 34:
        case 39:
        case 47:
        case 123:
        case 125:
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell55();
        }
        }
        
    }
    
    private int cell56() throws java.io.IOException {
        return 7;
    }
    
    private int cell57() throws java.io.IOException {
        mark(7);
        switch (getNextChar()) {
        // 0x000a
        case 10: {
            return cell56();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell58() throws java.io.IOException {
        return 6;
    }
    
    private int cell59() throws java.io.IOException {
        switch (getNextChar()) {
        // 0x002a
        case 42: {
            return cell60();
        }
        // 0x002f
        case 47: {
            return cell61();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell60() throws java.io.IOException {
        return 4;
    }
    
    private int cell61() throws java.io.IOException {
        mark(5);
        switch (getNextChar()) {
        // [0x000a0x000d0xffff]
        case 10:
        case 13:
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell61();
        }
        }
        
    }
    
    private int cell62() throws java.io.IOException {
        mark(2);
        switch (getNextChar()) {
        // \\
        case 92: {
            return cell63();
        }
        // [0x00270xffff]
        case 39:
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell64();
        }
        }
        
    }
    
    private int cell63() throws java.io.IOException {
        switch (getNextChar()) {
        // 0xffff
        case 65535: {
            return rewind();
            
        }
        default:  {
            return cell66();
        }
        }
        
    }
    
    private int cell64() throws java.io.IOException {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return cell65();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell65() throws java.io.IOException {
        return 0;
    }
    
    private int cell66() throws java.io.IOException {
        switch (getNextChar()) {
        // 0x0027
        case 39: {
            return cell67();
        }
        default:  {
            return rewind();
            
        }
        }
        
    }
    
    private int cell67() throws java.io.IOException {
        return 1;
    }
    
}
