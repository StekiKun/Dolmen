package org.stekikun.dolmen.jl;
import static org.stekikun.dolmen.jl.JLToken.*;

/**
 * Lexer generated by Dolmen 1.0.0
 */
public final class JLLexerGenerated extends org.stekikun.dolmen.codegen.LexBuffer {
    
    
    private final StringBuilder stringBuffer = new StringBuilder();
    private int braceDepth = 0;
    
    private char forBackslash(char c) {
        switch (c) {
        case 'n': return '\012';
        case 'r': return '\015';
        case 'b': return '\010';
        case 't': return '\011';
        case 'f': return '\014';
        default: return c;
        }
    }
    
    private char fromOctalCode(String code) {
        return (char)(Integer.parseInt(code, 8));
    }
    
    private char fromHexCode(String code) {
        int c = Integer.parseInt(code, 16);
        if (c == 0xFFFF) throw error("Invalid character code \uffff");
        return (char)c;
    }
    
    private org.stekikun.dolmen.jl.JLToken identOrKeyword(String id) {
        if (id.equals("rule")) return RULE;
        else if (id.equals("shortest")) return SHORTEST;
        else if (id.equals("eof")) return EOF;
        else if (id.equals("as")) return AS;
        else if (id.equals("orelse")) return ORELSE;
        else if (id.equals("import")) return IMPORT;
        else if (id.equals("static")) return STATIC;
        else if (id.equals("public")) return PUBLIC;
        else if (id.equals("private")) return PRIVATE;
        else return IDENT(id);
    }

    
    /**
     * Returns a fresh lexer based on the given character stream
     * @param inputname
     * @param reader
     */
    public JLLexerGenerated(String inputname, java.io.Reader reader) {
        super("1.0.0", inputname, reader);
    }
    
    /**
     * Entry point for rule main
     */
    public org.stekikun.dolmen.jl.JLToken main() {
        main:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell0();
            endToken();
            switch (result) {
            case 0:  {
                return main();
            }
            case 1:  {
                newline(); return main();
            }
            case 2:  {
                comment(); return main();
            }
            case 3:  {
                return main();
            }
            case 4:  {
                Position stringStart = getLexemeStart();
stringBuffer.setLength(0);
string();
startLoc = stringStart;
org.stekikun.dolmen.jl.JLToken res = LSTRING(stringBuffer.toString());
return res;
            }
            case 5:  {
                braceDepth = 1;
Position start = getLexemeStart();
Position p = getLexemeEnd();
int endOffset = action();
org.stekikun.dolmen.syntax.Extent ext = new org.stekikun.dolmen.syntax.Extent(
    filename, p.offset, endOffset, p.line, p.column());
startLoc = start;
return ACTION(ext);
            }
            case 6:  {
                return UNDERSCORE;
            }
            case 7:  {
                return identOrKeyword(getLexeme());
            }
            case 8:  {
                return INTEGER(Integer.parseInt(getLexeme()));
            }
            case 9:  {
                final char c = getSubLexemeChar(startPos + 1);
                return LCHAR(c);
            }
            case 10:  {
                final char c = getSubLexemeChar(startPos + 2);
                return LCHAR(forBackslash(c));
            }
            case 11:  {
                final String code = getSubLexeme(startPos + 2, curPos + (-1));
                return LCHAR(fromOctalCode(code));
            }
            case 12:  {
                final String code = getSubLexeme(curPos + (-5), curPos + (-1));
                return LCHAR(fromHexCode(code));
            }
            case 13:  {
                throw error("Invalid Unicode escacpe sequence");
            }
            case 14:  {
                return EQUAL;
            }
            case 15:  {
                return OR;
            }
            case 16:  {
                return LBRACKET;
            }
            case 17:  {
                return RBRACKET;
            }
            case 18:  {
                return STAR;
            }
            case 19:  {
                return MAYBE;
            }
            case 20:  {
                return PLUS;
            }
            case 21:  {
                return LPAREN;
            }
            case 22:  {
                return RPAREN;
            }
            case 23:  {
                return CARET;
            }
            case 24:  {
                return DASH;
            }
            case 25:  {
                return HASH;
            }
            case 26:  {
                return DOT;
            }
            case 27:  {
                return LANGLE;
            }
            case 28:  {
                return RANGLE;
            }
            case 29:  {
                return COMMA;
            }
            case 30:  {
                return SEMICOL;
            }
            case 31:  {
                return END;
            }
            case 32:  {
                throw error("Unfinished token");
            }
            default:
                break main;
            }
        }
        throw error("Empty token");
    }
    
    /**
     * Entry point for rule comment
     */
    private void comment() {
        comment:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell49();
            endToken();
            switch (result) {
            case 0:  {
                return;
            }
            case 1:  {
                comment(); return;
            }
            case 2:  {
                stringBuffer.setLength(0);
string();
stringBuffer.setLength(0);comment(); return;

            }
            case 3:  {
                skipChar(); comment(); return;
            }
            case 4:  {
                throw error("Unterminated comment");
            }
            case 5:  {
                newline(); comment(); return;
            }
            case 6:  {
                comment(); return;
            }
            default:
                break comment;
            }
        }
        throw error("Empty token");
    }
    
    /**
     * Entry point for rule string
     */
    private void string() {
        string:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell58();
            endToken();
            switch (result) {
            case 0:  {
                return;
            }
            case 1:  {
                final char c = getSubLexemeChar(startPos + 1);
                stringBuffer.append(forBackslash(c)); string(); return;
            }
            case 2:  {
                final String code = getSubLexeme(startPos + 1, curPos);
                stringBuffer.append(fromOctalCode(code)); string(); return;
            }
            case 3:  {
                final String code = getSubLexeme(curPos + (-4), curPos);
                stringBuffer.append(fromHexCode(code)); string(); return;
            }
            case 4:  {
                throw error("Invalid Unicode escacpe sequence");
            }
            case 5:  {
                final char c = getSubLexemeChar(startPos + 1);
                stringBuffer.append('\\').append(c); string(); return;
            }
            case 6:  {
                throw error("Unterminated escape sequence in string literal");
            }
            case 7:  {
                throw error("Unterminated string literal");
            }
            case 8:  {
                stringBuffer.append(getLexeme()); string(); return;
            }
            default:
                break string;
            }
        }
        throw error("Empty token");
    }
    
    /**
     * Entry point for rule action
     */
    private int action() {
        action:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell74();
            endToken();
            switch (result) {
            case 0:  {
                ++braceDepth; return action();
            }
            case 1:  {
                --braceDepth;
if (braceDepth == 0) return getLexemeStart().offset - 1;
return action();
            }
            case 2:  {
                stringBuffer.setLength(0);
string();stringBuffer.setLength(0);
return action();
            }
            case 3:  {
                skipChar(); return action();
            }
            case 4:  {
                comment(); return action();
            }
            case 5:  {
                return action();
            }
            case 6:  {
                throw error("Unterminated action");
            }
            case 7:  {
                newline(); return action();
            }
            case 8:  {
                return action();
            }
            case 9:  {
                return action();
            }
            default:
                break action;
            }
        }
        throw error("Empty token");
    }
    
    /**
     * Entry point for rule skipChar
     */
    private void skipChar() {
        skipChar:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell86();
            endToken();
            switch (result) {
            case 0:  {
                return;
            }
            case 1:  {
                return;
            }
            case 2:  {
                return;
            }
            case 3:  {
                return;
            }
            default:
                break skipChar;
            }
        }
        throw error("Empty token");
    }
    
    private int _jl_cell0() {
        final char _jl_char = getNextChar();
        if (_jl_char <= 47) {
            switch (_jl_char) {
            // [0x0009 0x000c 0x0020]
            case 9:
            case 12:
            case 32: {
                return _jl_cell30();
            }
            // 0x000a
            case 10: {
                return 1;
            }
            // 0x000d
            case 13: {
                return _jl_cell28();
            }
            // "
            case 34: {
                return 4;
            }
            // #
            case 35: {
                return 25;
            }
            // '
            case 39: {
                return _jl_cell19();
            }
            // (
            case 40: {
                return 21;
            }
            // )
            case 41: {
                return 22;
            }
            // *
            case 42: {
                return 18;
            }
            // +
            case 43: {
                return 20;
            }
            // ,
            case 44: {
                return 29;
            }
            // \-
            case 45: {
                return 24;
            }
            // .
            case 46: {
                return 26;
            }
            // /
            case 47: {
                return _jl_cell26();
            }
            default:  {
                return 32;
            }
            }
        } else  {
            if (_jl_char <= 90) {
                if (_jl_char <= 60) {
                    switch (_jl_char) {
                    // 0
                    case 48: {
                        return 8;
                    }
                    // :
                    case 58: {
                        return 32;
                    }
                    // ;
                    case 59: {
                        return 30;
                    }
                    // <
                    case 60: {
                        return 27;
                    }
                    default:  {
                        return _jl_cell20();
                    }
                    }
                } else  {
                    switch (_jl_char) {
                    // 0x003d
                    case 61: {
                        return 14;
                    }
                    // >
                    case 62: {
                        return 28;
                    }
                    // ?
                    case 63: {
                        return 19;
                    }
                    // @
                    case 64: {
                        return 32;
                    }
                    default:  {
                        return _jl_cell22();
                    }
                    }
                }
            } else  {
                if (_jl_char <= 95) {
                    switch (_jl_char) {
                    // \\
                    case 92: {
                        return 32;
                    }
                    // \]
                    case 93: {
                        return 17;
                    }
                    // \^
                    case 94: {
                        return 23;
                    }
                    // \_
                    case 95: {
                        return _jl_cell23();
                    }
                    default:  {
                        return 16;
                    }
                    }
                } else  {
                    if (_jl_char <= 123) {
                        switch (_jl_char) {
                        // 0x0060
                        case 96: {
                            return 32;
                        }
                        // {
                        case 123: {
                            return 5;
                        }
                        default:  {
                            return _jl_cell22();
                        }
                        }
                    } else  {
                        switch (_jl_char) {
                        // |
                        case 124: {
                            return 15;
                        }
                        // EOF
                        case 65535: {
                            return 31;
                        }
                        default:  {
                            return 32;
                        }
                        }
                    }
                }
            }
        }
    }
    
    private int _jl_cell19() {
        mark(32);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // \\
        case 92: {
            return _jl_cell33();
        }
        // EOF
        case 65535: {
            return rewind();
        }
        default:  {
            return _jl_cell34();
        }
        }
    }
    
    private int _jl_cell20() {
        while (true) {
            mark(8);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0-9]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57: {
                continue;
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell22() {
        while (true) {
            mark(7);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0-9 A-Z \_ a-z]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 95:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122: {
                continue;
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell23() {
        mark(6);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-Z \_ a-z]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122: {
            return _jl_cell22();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell26() {
        mark(32);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // *
        case 42: {
            return 2;
        }
        // /
        case 47: {
            return _jl_cell31();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell28() {
        mark(1);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // 0x000a
        case 10: {
            return 1;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell30() {
        while (true) {
            mark(0);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0x0009 0x000c 0x0020]
            case 9:
            case 12:
            case 32: {
                continue;
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell31() {
        while (true) {
            mark(3);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0x000a 0x000d EOF]
            case 10:
            case 13:
            case 65535: {
                return rewind();
            }
            default:  {
                continue;
            }
            }
        }
    }
    
    private int _jl_cell33() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0x0020 " ' \\ b f n r t]
        case 32:
        case 34:
        case 39:
        case 92:
        case 98:
        case 102:
        case 110:
        case 114:
        case 116: {
            return _jl_cell38();
        }
        // [0-3]
        case 48:
        case 49:
        case 50:
        case 51: {
            return _jl_cell37();
        }
        // [4-7]
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell36();
        }
        // u
        case 117: {
            return _jl_cell39();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell34() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 9;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell36() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 11;
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell48();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell37() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 11;
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell46();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell38() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 10;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell39() {
        while (true) {
            mark(13);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0-9 A-F a-f]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102: {
                return _jl_cell40();
            }
            // u
            case 117: {
                continue;
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell40() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell41();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell41() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell42();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell42() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell43();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell43() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 12;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell46() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 11;
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell48();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell48() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 11;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell49() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // 0x000a
        case 10: {
            return 5;
        }
        // 0x000d
        case 13: {
            return _jl_cell52();
        }
        // "
        case 34: {
            return 2;
        }
        // '
        case 39: {
            return 3;
        }
        // *
        case 42: {
            return _jl_cell56();
        }
        // EOF
        case 65535: {
            return 4;
        }
        default:  {
            return _jl_cell50();
        }
        }
    }
    
    private int _jl_cell50() {
        while (true) {
            mark(6);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0x000a 0x000d " ' * EOF]
            case 10:
            case 13:
            case 34:
            case 39:
            case 42:
            case 65535: {
                return rewind();
            }
            default:  {
                continue;
            }
            }
        }
    }
    
    private int _jl_cell52() {
        mark(5);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // 0x000a
        case 10: {
            return 5;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell56() {
        mark(1);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // /
        case 47: {
            return 0;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell58() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // "
        case 34: {
            return 0;
        }
        // \\
        case 92: {
            return _jl_cell62();
        }
        // EOF
        case 65535: {
            return 7;
        }
        default:  {
            return _jl_cell60();
        }
        }
    }
    
    private int _jl_cell60() {
        while (true) {
            mark(8);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [" \\ EOF]
            case 34:
            case 92:
            case 65535: {
                return rewind();
            }
            default:  {
                continue;
            }
            }
        }
    }
    
    private int _jl_cell62() {
        mark(6);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0x0020 " ' \\ b f n r t]
        case 32:
        case 34:
        case 39:
        case 92:
        case 98:
        case 102:
        case 110:
        case 114:
        case 116: {
            return 1;
        }
        // [0-3]
        case 48:
        case 49:
        case 50:
        case 51: {
            return _jl_cell67();
        }
        // [4-7]
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell66();
        }
        // u
        case 117: {
            return _jl_cell65();
        }
        // EOF
        case 65535: {
            return rewind();
        }
        default:  {
            return 5;
        }
        }
    }
    
    private int _jl_cell65() {
        while (true) {
            mark(4);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0-9 A-F a-f]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102: {
                return _jl_cell70();
            }
            // u
            case 117: {
                continue;
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell66() {
        mark(2);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return 2;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell67() {
        mark(2);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell68();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell68() {
        mark(2);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return 2;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell70() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell71();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell71() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell72();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell72() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return 3;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell74() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // 0x000a
        case 10: {
            return 7;
        }
        // 0x000d
        case 13: {
            return _jl_cell82();
        }
        // "
        case 34: {
            return 2;
        }
        // '
        case 39: {
            return 3;
        }
        // /
        case 47: {
            return _jl_cell80();
        }
        // {
        case 123: {
            return 0;
        }
        // }
        case 125: {
            return 1;
        }
        // EOF
        case 65535: {
            return 6;
        }
        default:  {
            return _jl_cell79();
        }
        }
    }
    
    private int _jl_cell79() {
        while (true) {
            mark(9);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0x000a 0x000d " ' / { } EOF]
            case 10:
            case 13:
            case 34:
            case 39:
            case 47:
            case 123:
            case 125:
            case 65535: {
                return rewind();
            }
            default:  {
                continue;
            }
            }
        }
    }
    
    private int _jl_cell80() {
        mark(8);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // *
        case 42: {
            return 4;
        }
        // /
        case 47: {
            return _jl_cell84();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell82() {
        mark(7);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // 0x000a
        case 10: {
            return 7;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell84() {
        while (true) {
            mark(5);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0x000a 0x000d EOF]
            case 10:
            case 13:
            case 65535: {
                return rewind();
            }
            default:  {
                continue;
            }
            }
        }
    }
    
    private int _jl_cell86() {
        mark(3);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [' EOF]
        case 39:
        case 65535: {
            return rewind();
        }
        // \\
        case 92: {
            return _jl_cell88();
        }
        default:  {
            return _jl_cell87();
        }
        }
    }
    
    private int _jl_cell87() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 0;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell88() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-3]
        case 48:
        case 49:
        case 50:
        case 51: {
            return _jl_cell91();
        }
        // [4-7]
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell90();
        }
        // EOF
        case 65535: {
            return rewind();
        }
        default:  {
            return _jl_cell89();
        }
        }
    }
    
    private int _jl_cell89() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 2;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell90() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 1;
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell94();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell91() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 1;
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell92();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell92() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 1;
        }
        // [0-7]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55: {
            return _jl_cell94();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell94() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // '
        case 39: {
            return 1;
        }
        default:  {
            return rewind();
        }
        }
    }
    
}
