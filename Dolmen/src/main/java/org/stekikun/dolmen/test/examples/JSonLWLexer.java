package org.stekikun.dolmen.test.examples;
import static org.stekikun.dolmen.test.examples.JSonLWParser.Token.*;
import org.stekikun.dolmen.test.examples.JSonLWParser.Token;

/**
 * Lexer generated by Dolmen 1.0.0
 */
public final class JSonLWLexer extends org.stekikun.dolmen.codegen.LexBuffer {
    
    
	private final StringBuilder buf = new StringBuilder();
	
	private static char escapedChar(char c) {
		switch (c) {
		case '"': return '"';
		case '\\': return '\\';
		case '/': return '/';
		case 'b': return '\b';
		case 'f': return '\f';
		case 'n': return '\n';
		case 'r': return '\r';
		case 't': return '\t';
		default: return c;
		}
	}

    
    /**
     * Returns a fresh lexer based on the given character stream
     * @param inputname
     * @param reader
     */
    public JSonLWLexer(String inputname, java.io.Reader reader) {
        super("1.0.0", inputname, reader);
    }
    
    /**
     * Entry point for rule main
     */
    public  Token  main() {
        main:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell0();
            endToken();
            switch (result) {
            case 0:  {
                 continue main; 
            }
            case 1:  {
                 newline(); continue main; 
            }
            case 2:  {
                 return LBRACKET; 
            }
            case 3:  {
                 return RBRACKET; 
            }
            case 4:  {
                 return COMMA; 
            }
            case 5:  {
                 return COLON; 
            }
            case 6:  {
                 return LSQUARE; 
            }
            case 7:  {
                 return RSQUARE; 
            }
            case 8:  {
                 return TRUE; 
            }
            case 9:  {
                 return FALSE; 
            }
            case 10:  {
                 return NULL; 
            }
            case 11:  {
                 
              buf.setLength(0);
              saveStart(this::string);
			  return STRING(buf.toString());
			
            }
            case 12:  {
                 return NUMBER(getLexeme()); 
            }
            case 13:  {
                 return EOF; 
            }
            default:
                break main;
            }
        }
        throw error("Empty token");
    }
    
    /**
     * Entry point for rule string
     */
    private  void  string() {
        string:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell35();
            endToken();
            switch (result) {
            case 0:  {
                 return; 
            }
            case 1:  {
                final char c = getSubLexemeChar(startPos + 1);
                 
			  buf.append(escapedChar(c));
			  continue string;
			
            }
            case 2:  {
                 
			  char c = hexUnicode(); 
			  buf.append(c);
			  continue string;
			
            }
            case 3:  {
                final char c = getSubLexemeChar(startPos + 1);
                 throw error("Unknown escape sequence: " + c); 
            }
            case 4:  {
                 throw error("Unterminated string"); 
            }
            case 5:  {
                 
			  buf.append(getLexemeChars());
			  continue string;
			
            }
            default:
                break string;
            }
        }
        throw error("Empty token");
    }
    
    /**
     * Entry point for rule hexUnicode
     */
    private  char hexUnicode() {
        hexUnicode:
        while (true) {
            // Initialize lexer for this automaton
            startToken();
            int result = _jl_cell43();
            endToken();
            switch (result) {
            case 0:  {
                 return (char)(Integer.parseInt(getLexeme(), 16)); 
            }
            case 1:  {
                 throw error("Illegal \\u Unicode sequence"); 
            }
            default:
                break hexUnicode;
            }
        }
        throw error("Empty token");
    }
    
    private int _jl_cell0() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0x0008-0x0009 0x0020]
        case 8:
        case 9:
        case 32: {
            return _jl_cell17();
        }
        // 0x000a
        case 10: {
            return 1;
        }
        // 0x000d
        case 13: {
            return _jl_cell15();
        }
        // "
        case 34: {
            return 11;
        }
        // ,
        case 44: {
            return 4;
        }
        // \-
        case 45: {
            return _jl_cell3();
        }
        // 0
        case 48: {
            return _jl_cell1();
        }
        // [1-9]
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell2();
        }
        // :
        case 58: {
            return 5;
        }
        // \[
        case 91: {
            return 6;
        }
        // \]
        case 93: {
            return 7;
        }
        // f
        case 102: {
            return _jl_cell6();
        }
        // n
        case 110: {
            return _jl_cell5();
        }
        // t
        case 116: {
            return _jl_cell8();
        }
        // {
        case 123: {
            return 2;
        }
        // }
        case 125: {
            return 3;
        }
        // EOF
        case 65535: {
            return 13;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell1() {
        mark(12);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // .
        case 46: {
            return _jl_cell28();
        }
        // E
        case 69: {
            return _jl_cell30();
        }
        // e
        case 101: {
            return _jl_cell31();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell2() {
        mark(12);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // .
        case 46: {
            return _jl_cell28();
        }
        // [0-9]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell29();
        }
        // E
        case 69: {
            return _jl_cell30();
        }
        // e
        case 101: {
            return _jl_cell31();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell3() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // 0
        case 48: {
            return _jl_cell1();
        }
        // [1-9]
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell2();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell5() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // u
        case 117: {
            return _jl_cell25();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell6() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // a
        case 97: {
            return _jl_cell21();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell8() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // r
        case 114: {
            return _jl_cell18();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell15() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // 0x000a
        case 10: {
            return 1;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell17() {
        while (true) {
            mark(0);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0x0008-0x0009 0x0020]
            case 8:
            case 9:
            case 32: {
                continue;
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell18() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // u
        case 117: {
            return _jl_cell19();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell19() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // e
        case 101: {
            return 8;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell21() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // l
        case 108: {
            return _jl_cell22();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell22() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // s
        case 115: {
            return _jl_cell23();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell23() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // e
        case 101: {
            return 9;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell25() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // l
        case 108: {
            return _jl_cell26();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell26() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // l
        case 108: {
            return 10;
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell28() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell34();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell29() {
        while (true) {
            mark(12);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // .
            case 46: {
                return _jl_cell28();
            }
            // [0-9]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57: {
                continue;
            }
            // E
            case 69: {
                return _jl_cell30();
            }
            // e
            case 101: {
                return _jl_cell31();
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell30() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // +
        case 43: {
            return _jl_cell33();
        }
        // \-
        case 45: {
            return _jl_cell33();
        }
        // [0-9]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell32();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell31() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // +
        case 43: {
            return _jl_cell33();
        }
        // \-
        case 45: {
            return _jl_cell33();
        }
        // [0-9]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell32();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell32() {
        while (true) {
            mark(12);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0-9]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57: {
                continue;
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell33() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57: {
            return _jl_cell32();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell34() {
        while (true) {
            mark(12);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [0-9]
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57: {
                continue;
            }
            // E
            case 69: {
                return _jl_cell30();
            }
            // e
            case 101: {
                return _jl_cell31();
            }
            default:  {
                return rewind();
            }
            }
        }
    }
    
    private int _jl_cell35() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // "
        case 34: {
            return 0;
        }
        // \\
        case 92: {
            return _jl_cell39();
        }
        // EOF
        case 65535: {
            return 4;
        }
        default:  {
            return _jl_cell37();
        }
        }
    }
    
    private int _jl_cell37() {
        while (true) {
            mark(5);
            final char _jl_char = getNextChar();
            switch (_jl_char) {
            // [" \\ EOF]
            case 34:
            case 92:
            case 65535: {
                return rewind();
            }
            default:  {
                continue;
            }
            }
        }
    }
    
    private int _jl_cell39() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [" / \\ b f n r t]
        case 34:
        case 47:
        case 92:
        case 98:
        case 102:
        case 110:
        case 114:
        case 116: {
            return 1;
        }
        // u
        case 117: {
            return 2;
        }
        // EOF
        case 65535: {
            return rewind();
        }
        default:  {
            return 3;
        }
        }
    }
    
    private int _jl_cell43() {
        mark(1);
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell44();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell44() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell45();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell45() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return _jl_cell46();
        }
        default:  {
            return rewind();
        }
        }
    }
    
    private int _jl_cell46() {
        final char _jl_char = getNextChar();
        switch (_jl_char) {
        // [0-9 A-F a-f]
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102: {
            return 0;
        }
        default:  {
            return rewind();
        }
        }
    }
    
     
    
}
