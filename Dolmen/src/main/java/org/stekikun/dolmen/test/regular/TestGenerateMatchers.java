package org.stekikun.dolmen.test.regular;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.eclipse.jdt.annotation.Nullable;
import org.stekikun.dolmen.common.Generator;
import org.stekikun.dolmen.syntax.Regular;
import org.stekikun.dolmen.syntax.Regulars;
import org.stekikun.dolmen.test.TestUnit;

/**
 * Testing unit which generates matchers for regular
 * expressions using {@link Regulars#witnesses} and
 * checks them using {@link Regulars#matches(Regular, String)}.
 * 
 * @author St√©phane Lescuyer
 */
public final class TestGenerateMatchers
	implements TestUnit<Regular, Set<String>> {

	private final int maxSamples;
	
	/**
	 * Returns a new instance of this test unit,
	 * which tests at most {@code maxSamples} 
	 * matchers per regular expression
	 * 
	 * @param maxSamples
	 */
	public TestGenerateMatchers(int maxSamples) {
		this.maxSamples = maxSamples;
	}

	@Override
	public String name() {
		return "Testing that matchers generated by Regulars.witnesses " 
				+ "are indeed verified by Regulars.matches";
	}

	@Override
	public Generator<Regular> generator() {
		return Regular.generator();
	}

	@Override
	public Set<String> apply(Regular input) {
		int found = 0;
		Set<String> res = new HashSet<String>();
		for (String matcher : Regulars.witnesses(input)) {
			if (res.add(matcher))
				if (++found == maxSamples) break;
		}
		return res;
	}

	@Override
	public @Nullable String check(Regular input, Set<String> output) {
		for (String matcher : output) {
			@Nullable Map<String, String> check = Regulars.matches(input, matcher);
			if (check == null) {
				StringBuilder buf = new StringBuilder();
				buf.append("String [").append(matcher)
				   .append("] does not match regexp ").append(input);
				return buf.toString();
			}
		}
		return null;
	}

}