package org.stekikun.dolmen.test.examples;

/**
 * Parser generated by Dolmen 1.0.0
 */
@SuppressWarnings("unused")
public final class NoRule extends org.stekikun.dolmen.codegen.BaseParser<NoRule.Token> {
    
    @SuppressWarnings("javadoc")
    public static abstract class Token {
        
        public enum Kind {
            A,
            B,
            C,
            I;
        }
        
        Token(Kind kind)  {
            this.kind = kind;
        }
        private final Kind kind;
        
        @Override
        public abstract String toString();
        
        public final Kind getKind() { return kind; }
        
        public final static class I extends Token {
            public final  int  value;
            
            private I( int  value) {
                super(Kind.I);
                this.value = value;
            }
            
            @Override
            public String toString() {
                return "I(" + value + ")";
            }
        }
        public static I I( int  value) {
            return new I(value);
        }
        
        private static final class Singleton extends Token {
            private Singleton(Kind kind) { super(kind); }
            
            @Override
            public String toString() {
                return getKind().toString();
            }
        }
        
        public static final Token A = new Singleton(Kind.A);
        public static final Token B = new Singleton(Kind.B);
        public static final Token C = new Singleton(Kind.C);
    }
    
    
     
    /**
     * Builds a new parser based on the given lexical buffer
     * and tokenizer
     * @param lexbuf
     * @param tokens
     */
    public <T extends org.stekikun.dolmen.codegen.LexBuffer> 
        NoRule(T lexbuf, java.util.function.Function<T, Token> tokens) {
        super("1.0.0", lexbuf, tokens);
    }
    
    private Token eat(Token.Kind kind) {
        Token ctoken = eat();
        if (kind != ctoken.getKind())
            throw tokenError(ctoken, kind);
        return ctoken;
    }
    
     
    
}
