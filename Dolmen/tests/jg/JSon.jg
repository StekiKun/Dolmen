import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import common.Lists;
import common.Maps;

// The tokens of the JSON language
token LBRACKET
token RBRACKET
token COMMA
token COLON
token LSQUARE
token RSQUARE
token TRUE
token FALSE
token NULL
token { String } STRING
token { double } NUMBER
token EOF

// Java class header, with the concrete JSON type
{
	public enum ValueKind {
		STRING, NUMBER, OBJECT, ARRAY,
		TRUE, FALSE, NULL;
	}

	public static abstract class Value<T> {
		public final T val;
		private Value(T val) { this.val = val; }
		
		@Override public abstract String toString();
		public abstract ValueKind getKind();
	}

	public static final class ValueString extends Value<String> {
		private ValueString(String val) {
			super(val);
		}
		
		@Override public String toString() {
			return val;
		}
		
		@Override public ValueKind getKind() {
			return ValueKind.STRING;
		}
	}
	public static ValueString valString(String s) {
		return new ValueString(s);
	}

	public static final class ValueNumber extends Value<Double> {
		private ValueNumber(double val) {
			super(val);
		}
		
		@Override public String toString() {
			return "" + val;
		}
		
		@Override public ValueKind getKind() {
			return ValueKind.NUMBER;
		}
	}
	public static ValueNumber valNumber(double val) {
		return new ValueNumber(val);
	}
	
	public static final class ValueObject extends Value<Map<String, Value<?>>> {
		private ValueObject(Map<String, Value<?>> val) {
			super(val);
		}
		
		@Override public String toString() {
			return "" + val;	// TODO better pprint
		}
		
		@Override public ValueKind getKind() {
			return ValueKind.OBJECT;
		}
	}
	public static ValueObject valObject(Map<String, Value<?>> obj) {
		return new ValueObject(obj);
	}
	
	public static final class ValueArray extends Value<List<Value<?>>> {
		private ValueArray(List<Value<?>> val) {
			super(val);
		}
		
		@Override public String toString() {
			return "" + val;
		}
	
		@Override public ValueKind getKind() {
			return ValueKind.ARRAY;
		}
	}
	public static ValueArray valArray(List<Value<?>> arr) {
		return new ValueArray(arr);
	}
	
	public static final class ValueTrue extends Value<Boolean> {
		private ValueTrue() {
			super(true);
		}
		
		@Override public String toString() {
			return "true";
		}
		
		@Override public ValueKind getKind() {
			return ValueKind.TRUE;
		}	
	}
	public static final ValueTrue valTrue = new ValueTrue();
	
	public static final class ValueFalse extends Value<Boolean> {
		private ValueFalse() {
			super(false);
		}
		
		@Override public String toString() {
			return "false";
		}
		
		@Override public ValueKind getKind() {
			return ValueKind.FALSE;
		}	
	}
	public static final ValueFalse valFalse = new ValueFalse();
	
	public static final class ValueNull extends Value<Object> {
		private ValueNull() {
			super(null);
		}
		
		@Override public String toString() {
			return "null";
		}
		
		@Override public ValueKind getKind() {
			return ValueKind.NULL;
		}	
	}
	public static final ValueNull valNull = new ValueNull();
}

// Parsing rules

public { Value<?> } rule json =
| v = value EOF	{ return v; }
;

private { Value<?> } rule value =
| s = STRING	{ return valString(s); }
| n = NUMBER	{ return valNumber(n); }
| o = object	{ return valObject(o); }
| a = array		{ return valArray(a); }
| TRUE			{ return valTrue; }
| FALSE			{ return valFalse; }
| NULL			{ return valNull; }
;

private { List<Value<?>> } rule array =
| LSQUARE elts = elements(null)	
				{ return elts; }
;

private { List<Value<?>> } rule elements(List<Value<?>> elts) =
| RSQUARE		{ return elts == null ? Lists.empty() : elts; }
| val = value
	{ List<Value<?>> acc = elts == null ? new ArrayList<>() : elts; }
	{ acc.add(val); }
  more_elements(acc)
  	{ return acc; }
;

private { void } rule more_elements(List<Value<?>> elts) =
| RSQUARE				{ return; }
| COMMA	 val = value 
	{ elts.add(val); }
  more_elements(elts)	
  	{ return; }
;

private { Map<String, Value<?>> } rule object =
| LBRACKET members = members(null)
				{ return members; }
;

private { Map<String, Value<?>> } rule members(Map<String, Value<?>> members) =
| RBRACKET		{ return members == null ? Maps.empty() : members; }
| 	{ Map<String, Value<?>> acc = members == null ? new HashMap<>() : members; }
  pair(acc)
  more_members(acc)
  	{ return acc; }
;

private { void } rule more_members(Map<String, Value<?>> members) =
| RBRACKET					{ return; }
| COMMA pair(members) more_members(members)	
							{ return; }
;

private { void } rule pair(Map<String, Value<?>> map) =
| s = STRING COLON val = value	{ map.put(s, val); return; }
;

{ }