/**
 * Some standard grammar constructs, which can be reused
 * thanks to to parametricity in Dolmen parsing rules
 * 
 * @author St√©phane Lescuyer
 */

import java.util.Optional;
import java.util.List;
import java.util.Collections;

token { String } ANY

{ }

// Optional constructs

private { boolean } rule boption<t>() =
| t		{ return true; }
| 		{ return false; }
;

private { Optional<#t> } rule option<t>() =
| v = t		{ return Optional.of(t); }
|			{ return Optional.empty(); }
;

private { #t } rule voption<t>(#t def) =
| v = t		{ return v; }
| 			{ return def; }
;

private { List<#t> } rule loption<t>() =
| v = t		{ return Collections.singletonList(v); }
|			{ return Collections.emptyList(); }
;

// Delimiting constructs

private { #constr } rule preceded<left, constr>() =
| left c = constr { return c; }
;

private { #constr } rule terminated<constr, right>() =
| c = constr right { return c; }
;

private { #constr } rule enclosed<left, constr, right>() =
| left c = constr right { return c; }
;

// List constructs

private { List<#r> } rule list<r>() =
| v = r 
  { List<#r> acc = new ArrayList<>(); acc.add(v); }
  more_list<r>(acc) 
| { return Collections.emptyList(); }
; 	

private { void } rule more_list<r>(List<#r> acc) =
| { return; }
| v = r { acc.add(v); } continue
;

private { List<#r> } rule nelist<r>() =
| v = r
  { List<#r> acc = new ArrayList<>(); acc.add(v); }
  more_list<r>(acc) 
;

private { List<#r> } rule separated_list<separator, r>() =
| l = loption<separated_nelist<separator, r>>()
	{ return l; }
;

private { List<#r> } rule separated_nelist<separator, r>() =
| v = r
  { List<#r> acc = new ArrayList<>(); acc.add(v); }
  more_separated_list<separator, r>(acc) 
;

private { void } rule more_separated_list<separator, r>(List<#r> acc) =
| { return; }
| separator v = r { acc.add(v); } continue
;

{ }